üìå Cheatsheet Wireshark ‚Äì An√°lisis de tr√°fico de Malware
üîπ 1. HTTP / HTTPS (b√°sicos)
http or tls


üëâ Mostrar todo el tr√°fico web (HTTP sin cifrar + HTTPS cifrado).

http.request.method == "GET"


üëâ Localizar todas las peticiones GET (descargas, beaconing).

üîπ 2. Handshakes y conexiones iniciales
tls.handshake.type == 1


üëâ Mostrar todos los Client Hello (inicio de sesi√≥n TLS).

tcp.flags.syn == 1 and tcp.flags.ack == 0


üëâ Mostrar SYN iniciales (intentos de abrir conexiones TCP).

üîπ 3. Filtrar C2 evitando ruido

(ejercicio STRRAT/RedLine)

(http.request or tls.handshake.type eq 1 or (tcp.flags.syn eq 1 and tcp.flags.ack eq 0 and !(ip.dst eq 172.16.1.0/24 or tcp.port eq 443 or tcp.port eq 80))) and !(ssdp)


üëâ Encuentra conexiones sospechosas excluyendo tr√°fico leg√≠timo interno (172.16.1.0/24) y puertos comunes (80/443).

tcp.flags eq 0x0002 and !(tcp.port eq 443) and !(tcp.port eq 80) and !(ip.dst eq 10.7.10.0/24)


üëâ Localiza SYN de C2 evitando tr√°fico web y direcciones internas.

üîπ 4. Identificar Host y Usuario
nbns


üëâ Descubre hostname de la v√≠ctima v√≠a NetBIOS.

kerberos.CNameString


üëâ Descubre nombre de usuario de la v√≠ctima v√≠a Kerberos.

ldap.AttributeDescription == "givenName"


EXTRAS PROTOCOLOS NO CIFRADOS --
Qu√© cubren bien

tcp.stream == N and tcp.len > 0

    Vale para cualquier C2 sobre TCP (HTTP en claro, TCP crudo tipo RedLine/STRRAT, websockets sin TLS, etc.).

    Te muestra solo paquetes con datos (fuera ACKs), as√≠ ves el contenido real (beaconing, √≥rdenes, exfil).

tcp.stream == N and tcp.flags.push == 1

    √ötil cuando el canal es interactivo (comando/respuesta) y el stack usa PSH.

    Te deja ver ‚Äúbloques significativos‚Äù de datos.

tcp.stream == N and tcp contains "tempuri.org" (o la cadena que toque)

    Perfecto para marcadores en claro dentro del stream (namespaces, tokens, rutas, etc.).

/////////////////////////ANALISIS DE VECTOR DE ENTRADA///////////////////////////

2) Filtros recomendados (Wireshark display filters) ‚Äî empeza por √©stos
A ‚Äî Descargas expl√≠citas de binarios por HTTP (GET/HEAD responses con nombres de archivo)
(http.request.method == "GET" or http.request.method == "HEAD") and http.request.uri matches "\.(exe|dll|msi|ps1|vbs|hta|zip|7z|cab|scr|bat|cmd)$"


Qu√© busca: URIs que terminan en extensiones ejecutables/paquete.
Si aparece: exporta objeto HTTP y calcula hash inmediatamente.

B ‚Äî URIs que contienen extensiones en el path o par√°metros (m√°s amplio)
(http.request.uri contains ".exe" or http.request.uri contains ".dll" or http.request.uri contains ".msi" or http.request.uri contains ".ps1" or http.request.uri contains ".zip" or http.request.uri contains ".7z")


Qu√© busca: casos ofuscados dentro de par√°metros.

C ‚Äî Respuestas HTTP con Content-Type indicando binario y tama√±o
http.content_type matches "application|octet-stream|x-msdownload|binary" or (http.content_length > 100000)


Qu√© busca: descargas binarios grandes (umbral ajustable). Si hay content_type: application/octet-stream suele ser fichero descargado.

D ‚Äî POSTs/PUTs (posible exfiltraci√≥n)
http.request.method == "POST" or http.request.method == "PUT"


Qu√© busca: si hubo subida de datos. Si hay POST con multipart/form-data o grandes Content-Length, extr√°elo.

E ‚Äî User-Agents sospechosos (PowerShell, Python, curl)
http.user_agent matches "(?i)PowerShell|Invoke-WebRequest|IWR|python-requests|urllib|curl|wget|libwww-perl|Go-http-client"


Qu√© busca: programas automatizados que suelen ejecutar payloads tras phishing.

F ‚Äî TLS: SNI que no sea conocido / conexiones TLS a IPs no habituales
tls.handshake.extensions_server_name and !(tls.handshake.extensions_server_name contains "microsoft" or tls.handshake.extensions_server_name contains "office" or tls.handshake.extensions_server_name contains "google" or tls.handshake.extensions_server_name contains "microsoftonline" or tls.handshake.extensions_server_name contains "amazonaws" or tls.handshake.extensions_server_name contains "cloudflare" or tls.handshake.extensions_server_name contains "mozilla")


Qu√© busca: conexiones TLS a dominios no esperados que sobresalen entre ruido de updates/CDN.

G ‚Äî DNS: nombres raros o reci√©n creados (filtros para revisar manualmente)
dns && !(dns.qry.name contains "microsoft" or dns.qry.name contains "office" or dns.qry.name contains "mozilla" or dns.qry.name contains "google" or dns.qry.name contains "apple")


Qu√© busca: queries DNS que no sean de infra conocida.

H ‚Äî TCP SYN repetitivo (beaconing)
tcp.flags.syn == 1 && tcp.flags.ack == 0


Seguido de: agrupar por dst IP para ver patrones peri√≥dicos.

I ‚Äî SMB/Windows file transfer (si red interna)
smb2 || smb || smb.cmd == 0x75  # (ajusta en Wireshark GUI seg√∫n versi√≥n)


Qu√© busca: transferencias de archivos por SMB (vector lateral o entrega de payload).

J ‚Äî QUIC/HTTP/2 trafic (modern browser / CDNs) ‚Äî buscar streams con executables
http2 or quic


Seguido por: inspeccionar http2.headers o quic frames para URIs/paths.

3) Comandos tshark / shell para extraer artefactos y generar CSVs (automatizable)
3.1 Extraer GETs con host, uri, time, user-agent, response code
tshark -r capture.pcap -Y 'http.request' -T fields \
  -e frame.number -e frame.time_epoch -e ip.src -e ip.dst -e http.host -e http.request.full_uri -e http.user_agent -e http.request.method -e http.response.code \
  > http_requests.tsv

3.2 Exportar objetos HTTP (archivos descargados)
tshark -r capture.pcap --export-objects http,./http_objects
# Luego calcular hashes:
for f in http_objects/*; do sha256sum "$f"; done > http_objects_hashes.txt

3.3 Extraer DNS queries + answers (ordenadas por time)
tshark -r capture.pcap -Y 'dns.qry.name' -T fields -e frame.time_epoch -e ip.src -e ip.dst -e dns.qry.name -e dns.qry.type -e dns.resp.addr | sort -k1n > dns_queries.tsv

3.4 Extraer TLS SNI (Client Hello)
tshark -r capture.pcap -Y 'tls.handshake.type == 1' -T fields -e frame.time_epoch -e ip.src -e ip.dst -e tls.handshake.extensions_server_name > tls_sni.tsv

3.5 Buscar User-Agents sospechosos r√°pidamente
grep -i -E 'PowerShell|python-requests|curl|wget|Go-http-client|libwww-perl|IEX' http_requests.tsv | cut -f1-8

3.6 B√∫squeda de URIs con extensiones ejecutables
awk -F'\t' '{ if ($6 ~ /\.(exe|dll|msi|ps1|vbs|hta|zip|7z|cab|scr|bat|cmd)$/) print $0 }' http_requests.tsv > suspicious_uri_hits.tsv

4) Correlaci√≥n obligatoria con el endpoint (qu√© comparar y c√≥mo)

Timestamps: cruza http_requests.tsv y tls_sni.tsv con el timeCreated del Application.evtx / Velociraptor triage (ejecuta join por timestamp ¬±2 min).

Prefetch / MFT: buscar nombres de ejecutables encontrados en http_objects_hashes.txt dentro del MFT/PREFETCH para confirmar ejecuci√≥n.

MsiInstaller / EventID 1000 / CreationTime de archivos: si MsiInstaller aparece cerca del hash/archivo descargado ‚Üí vector probable.

$Recycle.Bin y rutas Temp/AppData: si objetos extra√≠dos aparecen ah√≠, marca como evidencia de intento de eliminar.

5) Se√±ales de ‚Äúejecuci√≥n inmediata‚Äù que mirar en red

Descarga seguida de conexi√≥n a IPs nuevas en segundos/minutos ‚Üí el binario se ejecut√≥ y abri√≥ C2.

Arranque de PowerShell remota (si ves User-Agent de PowerShell o conexiones a servicios de gesti√≥n remota).

Resoluciones DNS a dominios din√°micos o DGAs poco despu√©s de la descarga.

Tr√°fico cifrado persistente hacia IPs no conocidas (posible beaconing).

Tr√°fico SMB o WMI remota tras la descarga (movimiento lateral).

6) Filtros ‚Äúcombinados‚Äù listos para pegar en Wireshark
Combinado 1 ‚Äî Descargas de ejecutables con UA no est√°ndar
(http.request and (http.request.uri matches "\.(exe|dll|msi|ps1|hta|zip|7z|cab|scr|bat|cmd)$" or http.request.uri contains ".exe" or http.content_type contains "octet-stream")) and (http.user_agent matches "(?i)PowerShell|python|curl|wget|Go-http-client|libwww-perl")

Combinado 2 ‚Äî Actividad inmediata post-descarga (descarga seguida de SYN hacia IP no-MS dentro de 60s)

(No se puede expresar en un solo display filter; ejecutar b√∫squeda en tshark y luego script para correlacionar timestamps)

Extrae descargas (con tiempo t0), luego busca SYNs desde host a IPs distintas al CDN en t0..t0+60s.

Combinado 3 ‚Äî DNS sospechoso + TLS SNI no-MS
(dns.qry.name and !(dns.qry.name contains "microsoft" or dns.qry.name contains "office" or dns.qry.na
